/**
 * –°–∏–º—É–ª—è—Ç–æ—Ä –±–æ—Ç–∞ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
 * –ò—Å–ø–æ–ª–Ω—è–µ—Ç –ª–æ–≥–∏–∫—É –±–æ—Ç–∞ –ø—Ä—è–º–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
 */

class BotSimulator {
    constructor(blocks, connections) {
        this.blocks = blocks;
        this.connections = connections;
        this.userData = {};
        this.currentBlockId = null;
        this.waitingForInput = false;
        this.waitingForCallback = false;
        this.messagesContainer = null;
        this.inputArea = null;
        this.modal = null;
    }

    // –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞
    start() {
        this.modal = document.getElementById('preview-modal');
        this.messagesContainer = document.getElementById('preview-messages');
        this.inputArea = document.getElementById('preview-input-area');
        
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        this.messagesContainer.innerHTML = '';
        this.userData = {};
        
        // –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        this.inputArea.style.display = 'none';
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        this.modal.classList.remove('hidden');
        
        // –ù–∞—Ö–æ–¥–∏–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–ª–æ–∫
        const startBlock = Object.values(this.blocks).find(b => b.type === 'start');
        if (!startBlock) {
            this.addBotMessage('‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–ª–æ–∫');
            return;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (startBlock.message) {
            this.addBotMessage(startBlock.message);
        }
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –±–ª–æ–∫—É
        setTimeout(() => {
            const nextBlockId = this.getNextBlock(startBlock);
            if (nextBlockId) {
                this.executeBlock(nextBlockId);
            }
        }, 500);
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–ª–æ–∫–∞
    getNextBlock(block) {
        if (!block.connections || !block.connections.outputs) {
            return null;
        }
        
        const defaultOutput = block.connections.outputs.default;
        if (Array.isArray(defaultOutput)) {
            return defaultOutput[0];
        }
        return defaultOutput;
    }

    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–ª–æ–∫–∞
    executeBlock(blockId) {
        if (!blockId) return;
        
        const block = this.blocks[blockId];
        if (!block) {
            console.error('Block not found:', blockId);
            return;
        }
        
        this.currentBlockId = blockId;
        
        switch(block.type) {
            case 'message':
                this.handleMessageBlock(block);
                break;
            case 'question':
                this.handleQuestionBlock(block);
                break;
            case 'choice':
                this.handleChoiceBlock(block);
                break;
            case 'inline_keyboard':
                this.handleInlineKeyboardBlock(block);
                break;
            case 'condition':
                this.handleConditionBlock(block);
                break;
            case 'delay':
                this.handleDelayBlock(block);
                break;
            case 'variable':
                this.handleVariableBlock(block);
                break;
            case 'chatgpt':
                this.handleChatGptBlock(block);
                break;
            case 'image':
                this.handleImageBlock(block);
                break;
            case 'calculation':
                this.handleCalculationBlock(block);
                break;
            case 'cart':
                this.handleCartBlock(block);
                break;
            case 'catalog':
                this.handleCatalogBlock(block);
                break;
            case 'order_form':
                this.handleOrderFormBlock(block);
                break;
            case 'order_confirm':
                this.handleOrderConfirmBlock(block);
                break;
            case 'payment':
                this.handlePaymentBlock(block);
                break;
            case 'database':
                this.handleDatabaseBlock(block);
                break;
            case 'notification':
                this.handleNotificationBlock(block);
                break;
            case 'loop':
                this.handleLoopBlock(block);
                break;
            default:
                this.addBotMessage(`‚ö†Ô∏è –ë–ª–æ–∫ —Ç–∏–ø–∞ "${block.type}" –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–µ`);
                const nextBlockId = this.getNextBlock(block);
                if (nextBlockId) {
                    setTimeout(() => this.executeBlock(nextBlockId), 300);
                }
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–æ–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    handleMessageBlock(block) {
        const text = this.substituteVariables(block.text || '');
        this.addBotMessage(text);
        
        const nextBlockId = this.getNextBlock(block);
        if (nextBlockId) {
            setTimeout(() => this.executeBlock(nextBlockId), 500);
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–æ–∫–∞ –≤–æ–ø—Ä–æ—Å–∞
    handleQuestionBlock(block) {
        const question = this.substituteVariables(block.question || '');
        this.addBotMessage(question);
        this.waitForUserInput(block.variable);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–æ–∫–∞ –≤—ã–±–æ—Ä–∞
    handleChoiceBlock(block) {
        const question = this.substituteVariables(block.question || '');
        const options = block.options || [];
        
        this.addBotMessage(question);
        
        if (options.length > 0) {
            this.addButtons(options, (option) => {
                this.userData[block.variable] = option;
                this.addUserMessage(option);
                
                const nextBlockId = this.getNextBlock(block);
                if (nextBlockId) {
                    setTimeout(() => this.executeBlock(nextBlockId), 300);
                }
            });
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    handleInlineKeyboardBlock(block) {
        const message = this.substituteVariables(block.message || '');
        const buttons = block.buttons || [];
        
        this.addBotMessage(message);
        
        if (buttons.length > 0) {
            this.addButtons(buttons.map(b => b.text), (text, index) => {
                const button = buttons[index];
                this.addUserMessage(text);
                
                // –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫ –ø–æ callback_data
                const callbackData = button.callback_data;
                const nextBlockId = block.connections?.outputs?.[callbackData];
                
                if (nextBlockId) {
                    setTimeout(() => this.executeBlock(nextBlockId), 300);
                } else {
                    this.addBotMessage('‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø–µ—Ä–µ—Ö–æ–¥ –¥–ª—è —ç—Ç–æ–π –∫–Ω–æ–ø–∫–∏');
                }
            });
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ª–æ–≤–∏—è
    handleConditionBlock(block) {
        const variable = block.variable || '';
        const condition = block.condition || 'equals';
        const value = block.value || '';
        
        const userValue = this.userData[variable] || '';
        let result = false;
        
        switch(condition) {
            case 'equals':
                result = String(userValue) === String(value);
                break;
            case 'contains':
                result = String(userValue).includes(String(value));
                break;
            case 'not_empty':
                result = Boolean(String(userValue).trim());
                break;
            case 'not_equals':
                result = String(userValue) !== String(value);
                break;
        }
        
        const nextBlockId = result 
            ? block.connections?.outputs?.true 
            : block.connections?.outputs?.false;
            
        if (nextBlockId) {
            setTimeout(() => this.executeBlock(nextBlockId), 200);
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–µ—Ä–∂–∫–∏
    handleDelayBlock(block) {
        const seconds = parseInt(block.seconds) || 1;
        this.showTyping();
        
        setTimeout(() => {
            this.hideTyping();
            const nextBlockId = this.getNextBlock(block);
            if (nextBlockId) {
                this.executeBlock(nextBlockId);
            }
        }, seconds * 1000);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    handleVariableBlock(block) {
        const varName = block.variable || '';
        const varValue = this.substituteVariables(block.value || '');
        
        if (varName) {
            this.userData[varName] = varValue;
        }
        
        const nextBlockId = this.getNextBlock(block);
        if (nextBlockId) {
            setTimeout(() => this.executeBlock(nextBlockId), 100);
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ ChatGPT –±–ª–æ–∫–∞
    handleChatGptBlock(block) {
        const prompt = this.substituteVariables(block.prompt || '');
        this.addBotMessage(`ü§ñ ChatGPT –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç: "${prompt}"`);
        this.showTyping();
        
        // –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ ChatGPT
        setTimeout(() => {
            this.hideTyping();
            const mockResponse = '–≠—Ç–æ —Å–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ ChatGPT. –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –Ω–∞—Å—Ç–æ—è—â–∏–π –æ—Ç–≤–µ—Ç –æ—Ç API.';
            this.userData[block.result_variable || 'gpt_response'] = mockResponse;
            
            const nextBlockId = this.getNextBlock(block);
            if (nextBlockId) {
                this.executeBlock(nextBlockId);
            }
        }, 2000);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–æ–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    handleImageBlock(block) {
        const caption = this.substituteVariables(block.caption || '');
        const imagePath = block.image_file || 'placeholder.jpg';
        this.addBotMessage(`üì∏ [–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${imagePath}]\n\n${caption}`);
        
        const nextBlockId = this.getNextBlock(block);
        if (nextBlockId) {
            setTimeout(() => this.executeBlock(nextBlockId), 500);
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–æ–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
    handleCalculationBlock(block) {
        const formula = block.formula || '';
        const resultVar = block.result_variable || '';
        
        try {
            // –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º—É–ª—É
            let processedFormula = this.substituteVariables(formula);
            
            // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞ –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã)
            const allowedChars = /^[0-9+\-*/.() ]+$/;
            if (allowedChars.test(processedFormula)) {
                const result = eval(processedFormula);
                this.userData[resultVar] = result;
            } else {
                this.userData[resultVar] = 0;
            }
        } catch (e) {
            this.userData[resultVar] = 0;
        }
        
        const nextBlockId = this.getNextBlock(block);
        if (nextBlockId) {
            setTimeout(() => this.executeBlock(nextBlockId), 200);
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–æ–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
    handleCartBlock(block) {
        const action = block.action || 'add';
        
        if (!this.userData._cart) {
            this.userData._cart = {};
        }
        
        switch(action) {
            case 'add':
                const productId = this.userData[block.product_id] || '—Ç–æ–≤–∞—Ä';
                const quantity = parseInt(this.userData[block.quantity]) || 1;
                this.userData._cart[productId] = (this.userData._cart[productId] || 0) + quantity;
                this.addBotMessage(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É: ${productId} (${quantity} —à—Ç.)`);
                break;
            case 'show':
                if (Object.keys(this.userData._cart).length === 0) {
                    this.addBotMessage('üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞');
                } else {
                    let cartText = 'üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n';
                    for (const [product, qty] of Object.entries(this.userData._cart)) {
                        cartText += `‚Ä¢ ${product}: ${qty} —à—Ç.\n`;
                    }
                    this.addBotMessage(cartText);
                }
                break;
            case 'clear':
                this.userData._cart = {};
                this.addBotMessage('üóëÔ∏è –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞');
                break;
            case 'remove':
                const removeProductId = this.userData[block.product_id];
                if (this.userData._cart[removeProductId]) {
                    delete this.userData._cart[removeProductId];
                    this.addBotMessage(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã: ${removeProductId}`);
                }
                break;
        }
        
        const nextBlockId = this.getNextBlock(block);
        if (nextBlockId) {
            setTimeout(() => this.executeBlock(nextBlockId), 500);
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–æ–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞
    handleCatalogBlock(block) {
        try {
            const productsData = block.products || '[]';
            const products = JSON.parse(productsData);
            
            if (products.length === 0) {
                this.addBotMessage('üìã –ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç');
                const nextBlockId = this.getNextBlock(block);
                if (nextBlockId) {
                    setTimeout(() => this.executeBlock(nextBlockId), 500);
                }
            } else {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
                this.userData._catalog_products = products;
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–∞–ª–æ–≥–∞
                this.addBotMessage('üìã –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤:\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:');
                
                // –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
                const buttonTexts = products.map(product => `${product.name} - ${product.price} —Ä—É–±`);
                
                this.addButtons(buttonTexts, (text, index) => {
                    const product = products[index];
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
                    this.userData.product_name = product.name;
                    this.userData.product_price = product.price;
                    this.userData.product_description = product.description || '';
                    this.userData.selected_product_number = index + 1;
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –≤—ã–±–æ—Ä–µ
                    this.addUserMessage(text);
                    
                    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –±–ª–æ–∫—É
                    const nextBlockId = this.getNextBlock(block);
                    if (nextBlockId) {
                        setTimeout(() => this.executeBlock(nextBlockId), 300);
                    }
                });
            }
        } catch (e) {
            console.error('Catalog error:', e);
            this.addBotMessage('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞');
            const nextBlockId = this.getNextBlock(block);
            if (nextBlockId) {
                setTimeout(() => this.executeBlock(nextBlockId), 500);
            }
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–æ–∫–∞ —Ñ–æ—Ä–º—ã –∑–∞–∫–∞–∑–∞
    handleOrderFormBlock(block) {
        const fields = block.fields || [];
        
        if (fields.length === 0) {
            const nextBlockId = this.getNextBlock(block);
            if (nextBlockId) {
                this.executeBlock(nextBlockId);
            }
            return;
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
        this.processFormFields(block, fields, 0);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
    processFormFields(block, fields, currentIndex) {
        if (currentIndex >= fields.length) {
            // –í—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
            const successMsg = block.success_message || '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã';
            this.addBotMessage(successMsg);
            
            const nextBlockId = this.getNextBlock(block);
            if (nextBlockId) {
                setTimeout(() => this.executeBlock(nextBlockId), 500);
            }
            return;
        }
        
        const field = fields[currentIndex];
        const fieldNames = {
            'name': '–ò–º—è',
            'phone': '–¢–µ–ª–µ—Ñ–æ–Ω',
            'email': 'Email',
            'address': '–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏',
            'comment': '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'
        };
        
        const fieldName = fieldNames[field.type] || field.type;
        this.addBotMessage(`–í–≤–µ–¥–∏—Ç–µ ${fieldName}:`);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
        this.formContext = {
            block: block,
            fields: fields,
            currentIndex: currentIndex,
            variable: field.variable
        };
        
        this.waitForUserInput(field.variable);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–æ–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    handleOrderConfirmBlock(block) {
        const title = this.substituteVariables(block.title || '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ');
        const template = this.substituteVariables(block.template || '–ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é');
        
        this.addBotMessage(`${title}\n\n${template}`);
        
        const buttons = [];
        const buttonCallbacks = {};
        
        if (block.show_confirm !== false) {
            buttons.push('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å');
            buttonCallbacks['‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'] = 'confirm_order';
        }
        if (block.show_edit !== false) {
            buttons.push('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å');
            buttonCallbacks['‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'] = 'edit_order';
        }
        if (block.show_cancel === true) {
            buttons.push('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å');
            buttonCallbacks['‚ùå –û—Ç–º–µ–Ω–∏—Ç—å'] = 'cancel_order';
        }
        
        if (buttons.length > 0) {
            this.addButtons(buttons, (text) => {
                this.addUserMessage(text);
                const callbackData = buttonCallbacks[text];
                const nextBlockId = block.connections?.outputs?.[callbackData];
                
                if (nextBlockId) {
                    setTimeout(() => this.executeBlock(nextBlockId), 300);
                }
            });
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–æ–∫–∞ –æ–ø–ª–∞—Ç—ã
    handlePaymentBlock(block) {
        const title = this.substituteVariables(block.title || '–û–ø–ª–∞—Ç–∞');
        const description = this.substituteVariables(block.description || '');
        const amountVar = block.amount || '';
        const currency = block.currency || 'RUB';
        
        const amount = this.userData[amountVar] || 0;
        
        this.addBotMessage(`üí≥ ${title}\n\n${description}\n\nüí∞ –°—É–º–º–∞: ${amount} ${currency}\n\n[–í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∫–Ω–æ–ø–∫–∞ –æ–ø–ª–∞—Ç—ã]`);
        
        const nextBlockId = this.getNextBlock(block);
        if (nextBlockId) {
            setTimeout(() => this.executeBlock(nextBlockId), 1000);
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–æ–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    handleDatabaseBlock(block) {
        const operation = block.operation || 'save';
        const key = this.substituteVariables(block.key || '');
        
        if (!this.userData._database) {
            this.userData._database = {};
        }
        
        switch(operation) {
            case 'save':
                const dataVar = block.data || '';
                const data = this.userData[dataVar];
                this.userData._database[key] = data;
                break;
            case 'load':
                const resultVar = block.result_variable || '';
                this.userData[resultVar] = this.userData._database[key] || '';
                break;
            case 'delete':
                delete this.userData._database[key];
                break;
        }
        
        const nextBlockId = this.getNextBlock(block);
        if (nextBlockId) {
            setTimeout(() => this.executeBlock(nextBlockId), 200);
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–æ–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    handleNotificationBlock(block) {
        const message = this.substituteVariables(block.message || '');
        const target = block.target || 'admin';
        
        if (target === 'admin') {
            this.addBotMessage(`üîî [–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞]\n\n${message}`);
        } else {
            this.addBotMessage(`üîî [–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ]`);
        }
        
        const nextBlockId = this.getNextBlock(block);
        if (nextBlockId) {
            setTimeout(() => this.executeBlock(nextBlockId), 500);
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–æ–∫–∞ —Ü–∏–∫–ª–∞
    handleLoopBlock(block) {
        const loopType = block.loop_type || 'count';
        
        if (loopType === 'count') {
            const count = parseInt(block.count) || 3;
            const counterVar = block.counter_variable || '';
            
            // –í –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ —Ü–∏–∫–ª –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è
            this.addBotMessage(`üîÑ –¶–∏–∫–ª –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω ${count} —Ä–∞–∑`);
            
            // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –≤—ã–ø–æ–ª–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é
            if (counterVar) {
                this.userData[counterVar] = 1;
            }
        }
        
        const nextBlockId = this.getNextBlock(block);
        if (nextBlockId) {
            setTimeout(() => this.executeBlock(nextBlockId), 300);
        }
    }

    // –ü–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    substituteVariables(text) {
        if (!text) return '';
        
        let result = text;
        Object.keys(this.userData).forEach(key => {
            const value = this.userData[key];
            result = result.replace(new RegExp(`\\{${key}\\}`, 'g'), value);
        });
        
        return result;
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞
    addBotMessage(text) {
        const messageDiv = document.createElement('div');
        messageDiv.className = 'preview-message bot';
        messageDiv.textContent = text;
        this.messagesContainer.appendChild(messageDiv);
        this.scrollToBottom();
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    addUserMessage(text) {
        const messageDiv = document.createElement('div');
        messageDiv.className = 'preview-message user';
        messageDiv.textContent = text;
        this.messagesContainer.appendChild(messageDiv);
        this.scrollToBottom();
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    addButtons(buttonTexts, callback) {
        const buttonsDiv = document.createElement('div');
        buttonsDiv.className = 'preview-buttons';
        
        buttonTexts.forEach((text, index) => {
            const button = document.createElement('button');
            button.className = 'preview-button';
            button.textContent = text;
            button.onclick = () => {
                callback(text, index);
                buttonsDiv.remove();
            };
            buttonsDiv.appendChild(button);
        });
        
        this.messagesContainer.appendChild(buttonsDiv);
        this.scrollToBottom();
    }

    // –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    waitForUserInput(variable) {
        this.waitingForInput = true;
        this.inputArea.style.display = 'flex';
        
        const input = document.getElementById('preview-input');
        input.value = '';
        input.focus();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –≤–≤–æ–¥–∞
        this.inputVariable = variable;
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    sendMessage(text) {
        if (!this.waitingForInput) return;
        
        this.userData[this.inputVariable] = text;
        this.addUserMessage(text);
        
        this.waitingForInput = false;
        this.inputArea.style.display = 'none';
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ñ–æ—Ä–º—ã
        if (this.formContext) {
            const { block, fields, currentIndex } = this.formContext;
            this.formContext = null;
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–ª—é —Ñ–æ—Ä–º—ã
            setTimeout(() => this.processFormFields(block, fields, currentIndex + 1), 300);
        } else {
            const block = this.blocks[this.currentBlockId];
            const nextBlockId = this.getNextBlock(block);
            
            if (nextBlockId) {
                setTimeout(() => this.executeBlock(nextBlockId), 300);
            }
        }
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
    showTyping() {
        const typingDiv = document.createElement('div');
        typingDiv.className = 'preview-message bot preview-loading';
        typingDiv.id = 'typing-indicator';
        typingDiv.innerHTML = '<span></span><span></span><span></span>';
        this.messagesContainer.appendChild(typingDiv);
        this.scrollToBottom();
    }

    // –°–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
    hideTyping() {
        const typingDiv = document.getElementById('typing-indicator');
        if (typingDiv) {
            typingDiv.remove();
        }
    }

    // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑
    scrollToBottom() {
        const chat = document.getElementById('preview-chat');
        if (chat) {
            chat.scrollTop = chat.scrollHeight;
        }
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
function sendPreviewMessage() {
    const input = document.getElementById('preview-input');
    const text = input.value.trim();
    
    if (text && window.currentSimulator) {
        window.currentSimulator.sendMessage(text);
        input.value = '';
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
function closePreview() {
    const modal = document.getElementById('preview-modal');
    if (modal) {
        modal.classList.add('hidden');
    }
    window.currentSimulator = null;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
document.addEventListener('DOMContentLoaded', () => {
    const input = document.getElementById('preview-input');
    if (input) {
        input.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                sendPreviewMessage();
            }
        });
    }
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å
window.BotSimulator = BotSimulator;
window.sendPreviewMessage = sendPreviewMessage;
window.closePreview = closePreview;
